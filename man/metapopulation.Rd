% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metapopulation.R
\name{metapopulation}
\alias{metapopulation}
\title{Create a metapopulation dynamics object}
\usage{
metapopulation(dynamics, dispersal)
}
\arguments{
\item{dynamics}{a \code{\link{dynamics}} object or list of dynamics objects
with one element for each population (each column/row of
\code{structure}). If a single dynamics object is
provided, it is recycled over all required populations}

\item{dispersal}{object created with
\code{\link{dispersal}}. \code{dispersal} objects
describe movements between populations and can include
class-specific movements and density-dependent movements}
}
\description{
Define population dynamics for multiple populations of
  a single species linked by dispersal (a metapopulation).
}
\details{
The \code{metapopulation} function connects multiple
  populations through known dispersal probabilities, handling
  standardisations of dispersal probabilities (if required) and
  updating masks and functions for all processes defined within each
  population. Further details on the definition of dispersal terms
  are provided in \code{\link{dispersal}}.

  Covariates can be included in metapopulation models. The default
  behaviour is for all populations to share a single set of covariates,
  with covariate associations and masks defined separately for each
  population. A workaround to the assumption of shared covariates
  is included in the examples, below. Including covariates on dispersal
  probabilities requires covariate associations and masks defined
  on the combined metapopulation model. This approach is possible
  but currently untested.
}
\examples{
# define some populations
dyn1 <- murray_cod()
dyn2 <- murray_cod(k = 15000)
dyn3 <- murray_cod(k = 30000)

# define metapopulation structure with populations
#   1 and 3 dispersing into population 2
mc_structure <- matrix(0, nrow = 3, ncol = 3)
mc_structure[1, 2] <- 1
mc_structure[3, 2] <- 1

# define dispersal between populations
nclass <- nrow(dyn1$matrix)
dispersal_matrix <- matrix(0, nrow = nclass, ncol = nclass)
dispersal_matrix[survival(dispersal_matrix, dims = 20:25)] <- 0.2
mc_dispersal1 <- dispersal(dispersal_matrix, proportion = TRUE)
mc_dispersal2 <- dispersal(dispersal_matrix, proportion = FALSE)
mc_dispersal <- list(mc_dispersal1, mc_dispersal2)

# create metapopulation object
mc_meta <- metapopulation(list(dyn1, dyn2, dyn3), mc_dispersal)

# simulate without covariates
sims <- simulate(mc_meta, nsim = 2)

# simulate with shared covariates
#  (uses pre-defined Murray cod covariate function)
xsim <- matrix(rnorm(20), ncol = 1)
sims <- simulate(mc_meta, nsim = 2, args = list(covariates = list(x = xsim)))

# simulate with separate covariates
#  (requires re-definition of Murray cod covariate function)
new_fn1 <- function(mat, x) {
  mat * (1 / (1 + exp(-0.5 * (x[1] + 10))))
}
new_fn2 <- function(mat, x) {
  mat * (1 / (1 + exp(-0.5 * (x[2] + 10))))
}
new_fn3 <- function(mat, x) {
  mat * (1 / (1 + exp(-0.5 * (x[3] + 10))))
}
dyn1 <- update(dyn1, covariates(masks = transition(dyn1$matrix), funs = new_fn1))
dyn2 <- update(dyn2, covariates(masks = transition(dyn2$matrix), funs = new_fn2))
dyn3 <- update(dyn3, covariates(masks = transition(dyn3$matrix), funs = new_fn3))

# (re)create metapopulation object
mc_meta <- metapopulation(list(dyn1, dyn2, dyn3), mc_dispersal)

# and simulate with one column of predictors for each population
xsim <- matrix(rnorm(60), ncol = 3)
sims <- simulate(mc_meta, nsim = 2, args = list(covariates = list(x = xsim)))
}
